# This file explains the solutions provided in the solutions.py file

# Question 1

Goal of this problem is to determine whether a anagram (t) is an substring of a string (s)

Decided to first start simple and do a more brute force strategy to solving this problem.  This strategy
was basically just loop through each subsection and compare each letter of the substring with each letter of
the subsection.  Then using the checklist we can determine if all the characters matched or not.  This was chosen
because it was the most straightforward and logical method.  If during an interview with time constraint it makes
sense to go with the most straightforward approach which is better than no answer.

The complexity of this algorithm is a bit complicated since it depends on two inputs.
Given s is length of string and t is length of anagram
We can approximate the time complexity as follows O((s-t)(t**2)+(s-t)*t + t)
This means that if the shorter the anagram relative to the string, the more efficient approximately O(n).  If the anagram is the same length of the string then we reach approximately O(n**2).  However worse case would be if the anagram is exactly half the size of the string, then we can reach up to O(n**3).  So, on average this algorithm is not very efficient.

We can approximately the space complexity as follows  O(s+t)
Since we are simply just saving multiple lists in linear space for both strings


# Question 2
# GOAL:  To find the longest palindromic substring in a string (a)

Used the same strategy as the previous problem where we loop through slide through each partition of the array.
The only difference is that this time the pattern we look for is a fixed pattern which is either an
aa or bab pattern.  As soon as the opening pattern has been detected then we recurse the function by
looking if the neighbors also match.  I then rebuild the string matching the pattern and return that.

The time complexity of this will vary mostly with what the hidden palindrome is.  At the very least
this algorithm will function at linear time being the best case since we will have to loop through
the whole string to find the initial pattern at least once.  It would seem that worse case would be
if the entire string is a palindrome and a matching pattern is found at the center of the string.
Then we would recurse through through half the string which would be about n/2.  Therefore the worse case
would be approximately O(0.5*a**2), since after we loop through once we have to loop through halfway.
While best case is O(a).

Space complexity here would still be O(a) space since it is pretty much linear and there are no 2 dimension
arrays required.

# Question 3
# Find the Minimum Spanning Tree (MST)

The strategy here was to create an empty list where we would loop and travel through each vertex.
Then I decided to use the built-in sort function to sort the list and append the object with minimum distance
to the new list.  This way I did not have to reinvent the wheel.  The input to this function was assumed to be
a dictionary.  Since we have to loop through each key in the direction and each key has a list.  The complexity is worse cases
O(n**2).  The spacial complexity would also be O(n**2) since we also have to build a map of 2D.


# Question 4
# Find the least common ancestor between two nodes on a BST

Here the input is a matrix.  So, we have to loop through each line of the matrix (which corresponds to
each node of the tree) and then loop through each possible neighbor.  This gives pretty much a O(n**2) complexity.
But for storage here we only require a linear storage of O(n) since will be building a simple dictionary
map to hold the parent and level.


# Question 5
# find the position of a linked list based on the input of the head and number of elements away from tail

Here we first had to build a linked list and then test the function.  Here we simply just
loop through the data to count the nodes then subtract the total from the m to find the position
relative to the end.  Then we loop to that position.  So here the worse case complexity
is O(n**2) since if we choose the last node (m=0) then we loop through the list twice.  Best cases
would be if the node chosen is the head then we would only loop through the list once and choose the
beginning.  Finally space complexity is constant in this case since we do not store more or less space depending
on the size of the linked list head input.
