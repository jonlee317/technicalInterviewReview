# This file explans the solutions provided in the solutions.py file

# Question 1

Goal of this problem is to determine whether a anagram (t) is an substring of a string (s) 

Methodology:
1)  Find the length of the substring and the total string
2)  Create and initialize a check list the length of the substring so that we can check off as each character is found
3)  Break the total string into subsegments the same length of the substring starting from the first letter of the string
  e.g. if the string is 'udacity' and the substring we want to search for is 'ad'
       then we first compare 'ad' with 'ud' (which is the first subsegment of 'udacity')
4)  Compare each letter in the substring with each letter in the chosen subsegment
5)  If match is detected, we append a 1 into a match_list which was created
6)  If the sum of all the matched characters equal to the length of the substring then we have found an anagram substring to be true
7)  If we found anagram to be true, we break out of the loop and return True
8)  If we did not find the anagram yet, then we have to clear the match_list and look at the next substring which is "da" in this case
9)  Repeat steps 4-8 until we reach the end of the string or we have found an anagram

Complexity Analysis:
Assume t is length of substring
Assume s is length of string

If the substring is one letter and at the end of the string
then we have to loop through each letter of the string once
and in addition for each of the letter we loop through one letter once

Which gives about O(n) time

worse case is possibly substring equal to the length of the string
Therefore loop through each letter n times which is O(n^2)

Space complexity
# TODO:  need to finish this
